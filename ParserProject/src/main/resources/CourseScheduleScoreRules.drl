import scheduler.Course;
import scheduler.CourseSchedule;
import scheduler.Offering;
import scheduler.Room;
import scheduler.TimeSlot;

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

// RoomOccupancy: Two lectures in the same room at the same period.
// Any extra lecture in the same period and room counts as one more violation.
rule "roomOccupancy"
    when
        Offering(timeSlot != null, $timeSlot : timeSlot, room != null, $room : room)
        // $leftLecture has lowest id of the period+room combo
        not Offering(timeSlot == $timeSlot, room == $room)
        // rightLecture has the same period
        Offering(timeSlot == $timeSlot, room == $room)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// RoomCapacity: For each lecture, the number of students that attend the course should be less or equal
// than the number of seats of all the rooms that host its lectures.
// Each student above the capacity counts as 1 point of penalty.
rule "roomCapacity"
    when
        $offering : Offering(room != null, capacity > getRoom().getCapacity())
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// ############################################################################
// Soft constraints
// ############################################################################


// need to write a constraint that tries to minimize the building's distance from
// ITE; do this once we have data on the building's distance


// need to also write a constraint that deals with course timeslots but need to
// figure out how to make that work with the project requirements
